// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MetaDataForFile.proto

#include "MetaDataForFile.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
PROTOBUF_CONSTEXPR MetaDataNodeForFile::MetaDataNodeForFile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.keyname_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.startbytes_)*/ 0

  , /*decltype(_impl_.length_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MetaDataNodeForFileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetaDataNodeForFileDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetaDataNodeForFileDefaultTypeInternal() {}
  union {
    MetaDataNodeForFile _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetaDataNodeForFileDefaultTypeInternal _MetaDataNodeForFile_default_instance_;
PROTOBUF_CONSTEXPR MetaDataListForFile::MetaDataListForFile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.metadatanodeforfile_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MetaDataListForFileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetaDataListForFileDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetaDataListForFileDefaultTypeInternal() {}
  union {
    MetaDataListForFile _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetaDataListForFileDefaultTypeInternal _MetaDataListForFile_default_instance_;
static ::_pb::Metadata file_level_metadata_MetaDataForFile_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_MetaDataForFile_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_MetaDataForFile_2eproto = nullptr;
const ::uint32_t TableStruct_MetaDataForFile_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::MetaDataNodeForFile, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::MetaDataNodeForFile, _impl_.startbytes_),
    PROTOBUF_FIELD_OFFSET(::MetaDataNodeForFile, _impl_.length_),
    PROTOBUF_FIELD_OFFSET(::MetaDataNodeForFile, _impl_.keyname_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::MetaDataListForFile, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::MetaDataListForFile, _impl_.metadatanodeforfile_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::MetaDataNodeForFile)},
        { 11, -1, -1, sizeof(::MetaDataListForFile)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::_MetaDataNodeForFile_default_instance_._instance,
    &::_MetaDataListForFile_default_instance_._instance,
};
const char descriptor_table_protodef_MetaDataForFile_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\025MetaDataForFile.proto\"J\n\023MetaDataNodeF"
    "orFile\022\022\n\nstartBytes\030\001 \001(\005\022\016\n\006length\030\002 \001"
    "(\005\022\017\n\007keyName\030\003 \001(\014\"H\n\023MetaDataListForFi"
    "le\0221\n\023metaDataNodeForFile\030\001 \003(\0132\024.MetaDa"
    "taNodeForFileb\006proto3"
};
static ::absl::once_flag descriptor_table_MetaDataForFile_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_MetaDataForFile_2eproto = {
    false,
    false,
    181,
    descriptor_table_protodef_MetaDataForFile_2eproto,
    "MetaDataForFile.proto",
    &descriptor_table_MetaDataForFile_2eproto_once,
    nullptr,
    0,
    2,
    schemas,
    file_default_instances,
    TableStruct_MetaDataForFile_2eproto::offsets,
    file_level_metadata_MetaDataForFile_2eproto,
    file_level_enum_descriptors_MetaDataForFile_2eproto,
    file_level_service_descriptors_MetaDataForFile_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_MetaDataForFile_2eproto_getter() {
  return &descriptor_table_MetaDataForFile_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_MetaDataForFile_2eproto(&descriptor_table_MetaDataForFile_2eproto);
// ===================================================================

class MetaDataNodeForFile::_Internal {
 public:
};

MetaDataNodeForFile::MetaDataNodeForFile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:MetaDataNodeForFile)
}
MetaDataNodeForFile::MetaDataNodeForFile(const MetaDataNodeForFile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MetaDataNodeForFile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.keyname_) {}

    , decltype(_impl_.startbytes_) {}

    , decltype(_impl_.length_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.keyname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.keyname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_keyname().empty()) {
    _this->_impl_.keyname_.Set(from._internal_keyname(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.startbytes_, &from._impl_.startbytes_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.length_) -
    reinterpret_cast<char*>(&_impl_.startbytes_)) + sizeof(_impl_.length_));
  // @@protoc_insertion_point(copy_constructor:MetaDataNodeForFile)
}

inline void MetaDataNodeForFile::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.keyname_) {}

    , decltype(_impl_.startbytes_) { 0 }

    , decltype(_impl_.length_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.keyname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.keyname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MetaDataNodeForFile::~MetaDataNodeForFile() {
  // @@protoc_insertion_point(destructor:MetaDataNodeForFile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MetaDataNodeForFile::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.keyname_.Destroy();
}

void MetaDataNodeForFile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MetaDataNodeForFile::Clear() {
// @@protoc_insertion_point(message_clear_start:MetaDataNodeForFile)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.keyname_.ClearToEmpty();
  ::memset(&_impl_.startbytes_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.length_) -
      reinterpret_cast<char*>(&_impl_.startbytes_)) + sizeof(_impl_.length_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetaDataNodeForFile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 startBytes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.startbytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes keyName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_keyname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MetaDataNodeForFile::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MetaDataNodeForFile)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 startBytes = 1;
  if (this->_internal_startbytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_startbytes(), target);
  }

  // int32 length = 2;
  if (this->_internal_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_length(), target);
  }

  // bytes keyName = 3;
  if (!this->_internal_keyname().empty()) {
    const std::string& _s = this->_internal_keyname();
    target = stream->WriteBytesMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MetaDataNodeForFile)
  return target;
}

::size_t MetaDataNodeForFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MetaDataNodeForFile)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes keyName = 3;
  if (!this->_internal_keyname().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_keyname());
  }

  // int32 startBytes = 1;
  if (this->_internal_startbytes() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_startbytes());
  }

  // int32 length = 2;
  if (this->_internal_length() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_length());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MetaDataNodeForFile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MetaDataNodeForFile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MetaDataNodeForFile::GetClassData() const { return &_class_data_; }


void MetaDataNodeForFile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MetaDataNodeForFile*>(&to_msg);
  auto& from = static_cast<const MetaDataNodeForFile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:MetaDataNodeForFile)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_keyname().empty()) {
    _this->_internal_set_keyname(from._internal_keyname());
  }
  if (from._internal_startbytes() != 0) {
    _this->_internal_set_startbytes(from._internal_startbytes());
  }
  if (from._internal_length() != 0) {
    _this->_internal_set_length(from._internal_length());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MetaDataNodeForFile::CopyFrom(const MetaDataNodeForFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MetaDataNodeForFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaDataNodeForFile::IsInitialized() const {
  return true;
}

void MetaDataNodeForFile::InternalSwap(MetaDataNodeForFile* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.keyname_, lhs_arena,
                                       &other->_impl_.keyname_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MetaDataNodeForFile, _impl_.length_)
      + sizeof(MetaDataNodeForFile::_impl_.length_)
      - PROTOBUF_FIELD_OFFSET(MetaDataNodeForFile, _impl_.startbytes_)>(
          reinterpret_cast<char*>(&_impl_.startbytes_),
          reinterpret_cast<char*>(&other->_impl_.startbytes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MetaDataNodeForFile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MetaDataForFile_2eproto_getter, &descriptor_table_MetaDataForFile_2eproto_once,
      file_level_metadata_MetaDataForFile_2eproto[0]);
}
// ===================================================================

class MetaDataListForFile::_Internal {
 public:
};

MetaDataListForFile::MetaDataListForFile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:MetaDataListForFile)
}
MetaDataListForFile::MetaDataListForFile(const MetaDataListForFile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MetaDataListForFile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.metadatanodeforfile_){from._impl_.metadatanodeforfile_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:MetaDataListForFile)
}

inline void MetaDataListForFile::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.metadatanodeforfile_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MetaDataListForFile::~MetaDataListForFile() {
  // @@protoc_insertion_point(destructor:MetaDataListForFile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MetaDataListForFile::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.metadatanodeforfile_.~RepeatedPtrField();
}

void MetaDataListForFile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MetaDataListForFile::Clear() {
// @@protoc_insertion_point(message_clear_start:MetaDataListForFile)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.metadatanodeforfile_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetaDataListForFile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .MetaDataNodeForFile metaDataNodeForFile = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metadatanodeforfile(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MetaDataListForFile::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MetaDataListForFile)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .MetaDataNodeForFile metaDataNodeForFile = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_metadatanodeforfile_size()); i < n; i++) {
    const auto& repfield = this->_internal_metadatanodeforfile(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MetaDataListForFile)
  return target;
}

::size_t MetaDataListForFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MetaDataListForFile)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .MetaDataNodeForFile metaDataNodeForFile = 1;
  total_size += 1UL * this->_internal_metadatanodeforfile_size();
  for (const auto& msg : this->_impl_.metadatanodeforfile_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MetaDataListForFile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MetaDataListForFile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MetaDataListForFile::GetClassData() const { return &_class_data_; }


void MetaDataListForFile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MetaDataListForFile*>(&to_msg);
  auto& from = static_cast<const MetaDataListForFile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:MetaDataListForFile)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.metadatanodeforfile_.MergeFrom(from._impl_.metadatanodeforfile_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MetaDataListForFile::CopyFrom(const MetaDataListForFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MetaDataListForFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaDataListForFile::IsInitialized() const {
  return true;
}

void MetaDataListForFile::InternalSwap(MetaDataListForFile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.metadatanodeforfile_.InternalSwap(&other->_impl_.metadatanodeforfile_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MetaDataListForFile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MetaDataForFile_2eproto_getter, &descriptor_table_MetaDataForFile_2eproto_once,
      file_level_metadata_MetaDataForFile_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::MetaDataNodeForFile*
Arena::CreateMaybeMessage< ::MetaDataNodeForFile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MetaDataNodeForFile >(arena);
}
template<> PROTOBUF_NOINLINE ::MetaDataListForFile*
Arena::CreateMaybeMessage< ::MetaDataListForFile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MetaDataListForFile >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
