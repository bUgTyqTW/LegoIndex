// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MetaDataForFile.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MetaDataForFile_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_MetaDataForFile_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4022000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4022000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_MetaDataForFile_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MetaDataForFile_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_MetaDataForFile_2eproto;
class MetaDataListForFile;
struct MetaDataListForFileDefaultTypeInternal;
extern MetaDataListForFileDefaultTypeInternal _MetaDataListForFile_default_instance_;
class MetaDataNodeForFile;
struct MetaDataNodeForFileDefaultTypeInternal;
extern MetaDataNodeForFileDefaultTypeInternal _MetaDataNodeForFile_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template <>
::MetaDataListForFile* Arena::CreateMaybeMessage<::MetaDataListForFile>(Arena*);
template <>
::MetaDataNodeForFile* Arena::CreateMaybeMessage<::MetaDataNodeForFile>(Arena*);
PROTOBUF_NAMESPACE_CLOSE


// ===================================================================


// -------------------------------------------------------------------

class MetaDataNodeForFile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MetaDataNodeForFile) */ {
 public:
  inline MetaDataNodeForFile() : MetaDataNodeForFile(nullptr) {}
  ~MetaDataNodeForFile() override;
  explicit PROTOBUF_CONSTEXPR MetaDataNodeForFile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MetaDataNodeForFile(const MetaDataNodeForFile& from);
  MetaDataNodeForFile(MetaDataNodeForFile&& from) noexcept
    : MetaDataNodeForFile() {
    *this = ::std::move(from);
  }

  inline MetaDataNodeForFile& operator=(const MetaDataNodeForFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetaDataNodeForFile& operator=(MetaDataNodeForFile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MetaDataNodeForFile& default_instance() {
    return *internal_default_instance();
  }
  static inline const MetaDataNodeForFile* internal_default_instance() {
    return reinterpret_cast<const MetaDataNodeForFile*>(
               &_MetaDataNodeForFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MetaDataNodeForFile& a, MetaDataNodeForFile& b) {
    a.Swap(&b);
  }
  inline void Swap(MetaDataNodeForFile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MetaDataNodeForFile* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MetaDataNodeForFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MetaDataNodeForFile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MetaDataNodeForFile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MetaDataNodeForFile& from) {
    MetaDataNodeForFile::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetaDataNodeForFile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "MetaDataNodeForFile";
  }
  protected:
  explicit MetaDataNodeForFile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyNameFieldNumber = 3,
    kStartBytesFieldNumber = 1,
    kLengthFieldNumber = 2,
  };
  // bytes keyName = 3;
  void clear_keyname() ;
  const std::string& keyname() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_keyname(Arg_&& arg, Args_... args);
  std::string* mutable_keyname();
  PROTOBUF_NODISCARD std::string* release_keyname();
  void set_allocated_keyname(std::string* ptr);

  private:
  const std::string& _internal_keyname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_keyname(
      const std::string& value);
  std::string* _internal_mutable_keyname();

  public:
  // int32 startBytes = 1;
  void clear_startbytes() ;
  ::int32_t startbytes() const;
  void set_startbytes(::int32_t value);

  private:
  ::int32_t _internal_startbytes() const;
  void _internal_set_startbytes(::int32_t value);

  public:
  // int32 length = 2;
  void clear_length() ;
  ::int32_t length() const;
  void set_length(::int32_t value);

  private:
  ::int32_t _internal_length() const;
  void _internal_set_length(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:MetaDataNodeForFile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keyname_;
    ::int32_t startbytes_;
    ::int32_t length_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MetaDataForFile_2eproto;
};// -------------------------------------------------------------------

class MetaDataListForFile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MetaDataListForFile) */ {
 public:
  inline MetaDataListForFile() : MetaDataListForFile(nullptr) {}
  ~MetaDataListForFile() override;
  explicit PROTOBUF_CONSTEXPR MetaDataListForFile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MetaDataListForFile(const MetaDataListForFile& from);
  MetaDataListForFile(MetaDataListForFile&& from) noexcept
    : MetaDataListForFile() {
    *this = ::std::move(from);
  }

  inline MetaDataListForFile& operator=(const MetaDataListForFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetaDataListForFile& operator=(MetaDataListForFile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MetaDataListForFile& default_instance() {
    return *internal_default_instance();
  }
  static inline const MetaDataListForFile* internal_default_instance() {
    return reinterpret_cast<const MetaDataListForFile*>(
               &_MetaDataListForFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MetaDataListForFile& a, MetaDataListForFile& b) {
    a.Swap(&b);
  }
  inline void Swap(MetaDataListForFile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MetaDataListForFile* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MetaDataListForFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MetaDataListForFile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MetaDataListForFile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MetaDataListForFile& from) {
    MetaDataListForFile::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetaDataListForFile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "MetaDataListForFile";
  }
  protected:
  explicit MetaDataListForFile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaDataNodeForFileFieldNumber = 1,
  };
  // repeated .MetaDataNodeForFile metaDataNodeForFile = 1;
  int metadatanodeforfile_size() const;
  private:
  int _internal_metadatanodeforfile_size() const;

  public:
  void clear_metadatanodeforfile() ;
  ::MetaDataNodeForFile* mutable_metadatanodeforfile(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MetaDataNodeForFile >*
      mutable_metadatanodeforfile();
  private:
  const ::MetaDataNodeForFile& _internal_metadatanodeforfile(int index) const;
  ::MetaDataNodeForFile* _internal_add_metadatanodeforfile();
  public:
  const ::MetaDataNodeForFile& metadatanodeforfile(int index) const;
  ::MetaDataNodeForFile* add_metadatanodeforfile();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MetaDataNodeForFile >&
      metadatanodeforfile() const;
  // @@protoc_insertion_point(class_scope:MetaDataListForFile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MetaDataNodeForFile > metadatanodeforfile_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MetaDataForFile_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// MetaDataNodeForFile

// int32 startBytes = 1;
inline void MetaDataNodeForFile::clear_startbytes() {
  _impl_.startbytes_ = 0;
}
inline ::int32_t MetaDataNodeForFile::startbytes() const {
  // @@protoc_insertion_point(field_get:MetaDataNodeForFile.startBytes)
  return _internal_startbytes();
}
inline void MetaDataNodeForFile::set_startbytes(::int32_t value) {
  _internal_set_startbytes(value);
  // @@protoc_insertion_point(field_set:MetaDataNodeForFile.startBytes)
}
inline ::int32_t MetaDataNodeForFile::_internal_startbytes() const {
  return _impl_.startbytes_;
}
inline void MetaDataNodeForFile::_internal_set_startbytes(::int32_t value) {
  ;
  _impl_.startbytes_ = value;
}

// int32 length = 2;
inline void MetaDataNodeForFile::clear_length() {
  _impl_.length_ = 0;
}
inline ::int32_t MetaDataNodeForFile::length() const {
  // @@protoc_insertion_point(field_get:MetaDataNodeForFile.length)
  return _internal_length();
}
inline void MetaDataNodeForFile::set_length(::int32_t value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:MetaDataNodeForFile.length)
}
inline ::int32_t MetaDataNodeForFile::_internal_length() const {
  return _impl_.length_;
}
inline void MetaDataNodeForFile::_internal_set_length(::int32_t value) {
  ;
  _impl_.length_ = value;
}

// bytes keyName = 3;
inline void MetaDataNodeForFile::clear_keyname() {
  _impl_.keyname_.ClearToEmpty();
}
inline const std::string& MetaDataNodeForFile::keyname() const {
  // @@protoc_insertion_point(field_get:MetaDataNodeForFile.keyName)
  return _internal_keyname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MetaDataNodeForFile::set_keyname(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.keyname_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MetaDataNodeForFile.keyName)
}
inline std::string* MetaDataNodeForFile::mutable_keyname() {
  std::string* _s = _internal_mutable_keyname();
  // @@protoc_insertion_point(field_mutable:MetaDataNodeForFile.keyName)
  return _s;
}
inline const std::string& MetaDataNodeForFile::_internal_keyname() const {
  return _impl_.keyname_.Get();
}
inline void MetaDataNodeForFile::_internal_set_keyname(const std::string& value) {
  ;


  _impl_.keyname_.Set(value, GetArenaForAllocation());
}
inline std::string* MetaDataNodeForFile::_internal_mutable_keyname() {
  ;
  return _impl_.keyname_.Mutable( GetArenaForAllocation());
}
inline std::string* MetaDataNodeForFile::release_keyname() {
  // @@protoc_insertion_point(field_release:MetaDataNodeForFile.keyName)
  return _impl_.keyname_.Release();
}
inline void MetaDataNodeForFile::set_allocated_keyname(std::string* value) {
  _impl_.keyname_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.keyname_.IsDefault()) {
          _impl_.keyname_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MetaDataNodeForFile.keyName)
}

// -------------------------------------------------------------------

// MetaDataListForFile

// repeated .MetaDataNodeForFile metaDataNodeForFile = 1;
inline int MetaDataListForFile::_internal_metadatanodeforfile_size() const {
  return _impl_.metadatanodeforfile_.size();
}
inline int MetaDataListForFile::metadatanodeforfile_size() const {
  return _internal_metadatanodeforfile_size();
}
inline void MetaDataListForFile::clear_metadatanodeforfile() {
  _impl_.metadatanodeforfile_.Clear();
}
inline ::MetaDataNodeForFile* MetaDataListForFile::mutable_metadatanodeforfile(int index) {
  // @@protoc_insertion_point(field_mutable:MetaDataListForFile.metaDataNodeForFile)
  return _impl_.metadatanodeforfile_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MetaDataNodeForFile >*
MetaDataListForFile::mutable_metadatanodeforfile() {
  // @@protoc_insertion_point(field_mutable_list:MetaDataListForFile.metaDataNodeForFile)
  return &_impl_.metadatanodeforfile_;
}
inline const ::MetaDataNodeForFile& MetaDataListForFile::_internal_metadatanodeforfile(int index) const {
  return _impl_.metadatanodeforfile_.Get(index);
}
inline const ::MetaDataNodeForFile& MetaDataListForFile::metadatanodeforfile(int index) const {
  // @@protoc_insertion_point(field_get:MetaDataListForFile.metaDataNodeForFile)
  return _internal_metadatanodeforfile(index);
}
inline ::MetaDataNodeForFile* MetaDataListForFile::_internal_add_metadatanodeforfile() {
  return _impl_.metadatanodeforfile_.Add();
}
inline ::MetaDataNodeForFile* MetaDataListForFile::add_metadatanodeforfile() {
  ::MetaDataNodeForFile* _add = _internal_add_metadatanodeforfile();
  // @@protoc_insertion_point(field_add:MetaDataListForFile.metaDataNodeForFile)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MetaDataNodeForFile >&
MetaDataListForFile::metadatanodeforfile() const {
  // @@protoc_insertion_point(field_list:MetaDataListForFile.metaDataNodeForFile)
  return _impl_.metadatanodeforfile_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_MetaDataForFile_2eproto_2epb_2eh
