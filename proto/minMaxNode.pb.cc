// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: minMaxNode.proto

#include "minMaxNode.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
PROTOBUF_CONSTEXPR MinMaxNode::MinMaxNode(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.min_)*/ 0

  , /*decltype(_impl_.max_)*/ 0

  , /*decltype(_impl_.start_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.end_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MinMaxNodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MinMaxNodeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MinMaxNodeDefaultTypeInternal() {}
  union {
    MinMaxNode _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MinMaxNodeDefaultTypeInternal _MinMaxNode_default_instance_;
PROTOBUF_CONSTEXPR MinMaxList::MinMaxList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.minmaxnodes_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MinMaxListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MinMaxListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MinMaxListDefaultTypeInternal() {}
  union {
    MinMaxList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MinMaxListDefaultTypeInternal _MinMaxList_default_instance_;
static ::_pb::Metadata file_level_metadata_minMaxNode_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_minMaxNode_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_minMaxNode_2eproto = nullptr;
const ::uint32_t TableStruct_minMaxNode_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::MinMaxNode, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::MinMaxNode, _impl_.min_),
    PROTOBUF_FIELD_OFFSET(::MinMaxNode, _impl_.max_),
    PROTOBUF_FIELD_OFFSET(::MinMaxNode, _impl_.start_),
    PROTOBUF_FIELD_OFFSET(::MinMaxNode, _impl_.end_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::MinMaxList, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::MinMaxList, _impl_.minmaxnodes_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::MinMaxNode)},
        { 12, -1, -1, sizeof(::MinMaxList)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::_MinMaxNode_default_instance_._instance,
    &::_MinMaxList_default_instance_._instance,
};
const char descriptor_table_protodef_minMaxNode_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\020minMaxNode.proto\"B\n\nMinMaxNode\022\013\n\003min\030"
    "\001 \001(\001\022\013\n\003max\030\002 \001(\001\022\r\n\005start\030\003 \001(\004\022\013\n\003end"
    "\030\004 \001(\004\".\n\nMinMaxList\022 \n\013minMaxNodes\030\001 \003("
    "\0132\013.MinMaxNodeb\006proto3"
};
static ::absl::once_flag descriptor_table_minMaxNode_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_minMaxNode_2eproto = {
    false,
    false,
    142,
    descriptor_table_protodef_minMaxNode_2eproto,
    "minMaxNode.proto",
    &descriptor_table_minMaxNode_2eproto_once,
    nullptr,
    0,
    2,
    schemas,
    file_default_instances,
    TableStruct_minMaxNode_2eproto::offsets,
    file_level_metadata_minMaxNode_2eproto,
    file_level_enum_descriptors_minMaxNode_2eproto,
    file_level_service_descriptors_minMaxNode_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_minMaxNode_2eproto_getter() {
  return &descriptor_table_minMaxNode_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_minMaxNode_2eproto(&descriptor_table_minMaxNode_2eproto);
// ===================================================================

class MinMaxNode::_Internal {
 public:
};

MinMaxNode::MinMaxNode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:MinMaxNode)
}
MinMaxNode::MinMaxNode(const MinMaxNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:MinMaxNode)
}

inline void MinMaxNode::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.min_) { 0 }

    , decltype(_impl_.max_) { 0 }

    , decltype(_impl_.start_) { ::uint64_t{0u} }

    , decltype(_impl_.end_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MinMaxNode::~MinMaxNode() {
  // @@protoc_insertion_point(destructor:MinMaxNode)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MinMaxNode::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void MinMaxNode::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MinMaxNode::Clear() {
// @@protoc_insertion_point(message_clear_start:MinMaxNode)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.min_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.end_) -
      reinterpret_cast<char*>(&_impl_.min_)) + sizeof(_impl_.end_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MinMaxNode::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double min = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 9)) {
          _impl_.min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // double max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 17)) {
          _impl_.max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 start = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 end = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MinMaxNode::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MinMaxNode)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double min = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_min = this->_internal_min();
  ::uint64_t raw_min;
  memcpy(&raw_min, &tmp_min, sizeof(tmp_min));
  if (raw_min != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_min(), target);
  }

  // double max = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_max = this->_internal_max();
  ::uint64_t raw_max;
  memcpy(&raw_max, &tmp_max, sizeof(tmp_max));
  if (raw_max != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_max(), target);
  }

  // uint64 start = 3;
  if (this->_internal_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_start(), target);
  }

  // uint64 end = 4;
  if (this->_internal_end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MinMaxNode)
  return target;
}

::size_t MinMaxNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MinMaxNode)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double min = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_min = this->_internal_min();
  ::uint64_t raw_min;
  memcpy(&raw_min, &tmp_min, sizeof(tmp_min));
  if (raw_min != 0) {
    total_size += 9;
  }

  // double max = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_max = this->_internal_max();
  ::uint64_t raw_max;
  memcpy(&raw_max, &tmp_max, sizeof(tmp_max));
  if (raw_max != 0) {
    total_size += 9;
  }

  // uint64 start = 3;
  if (this->_internal_start() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_start());
  }

  // uint64 end = 4;
  if (this->_internal_end() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_end());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MinMaxNode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MinMaxNode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MinMaxNode::GetClassData() const { return &_class_data_; }


void MinMaxNode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MinMaxNode*>(&to_msg);
  auto& from = static_cast<const MinMaxNode&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:MinMaxNode)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_min = from._internal_min();
  ::uint64_t raw_min;
  memcpy(&raw_min, &tmp_min, sizeof(tmp_min));
  if (raw_min != 0) {
    _this->_internal_set_min(from._internal_min());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_max = from._internal_max();
  ::uint64_t raw_max;
  memcpy(&raw_max, &tmp_max, sizeof(tmp_max));
  if (raw_max != 0) {
    _this->_internal_set_max(from._internal_max());
  }
  if (from._internal_start() != 0) {
    _this->_internal_set_start(from._internal_start());
  }
  if (from._internal_end() != 0) {
    _this->_internal_set_end(from._internal_end());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MinMaxNode::CopyFrom(const MinMaxNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MinMaxNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MinMaxNode::IsInitialized() const {
  return true;
}

void MinMaxNode::InternalSwap(MinMaxNode* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MinMaxNode, _impl_.end_)
      + sizeof(MinMaxNode::_impl_.end_)
      - PROTOBUF_FIELD_OFFSET(MinMaxNode, _impl_.min_)>(
          reinterpret_cast<char*>(&_impl_.min_),
          reinterpret_cast<char*>(&other->_impl_.min_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MinMaxNode::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minMaxNode_2eproto_getter, &descriptor_table_minMaxNode_2eproto_once,
      file_level_metadata_minMaxNode_2eproto[0]);
}
// ===================================================================

class MinMaxList::_Internal {
 public:
};

MinMaxList::MinMaxList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:MinMaxList)
}
MinMaxList::MinMaxList(const MinMaxList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MinMaxList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.minmaxnodes_){from._impl_.minmaxnodes_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:MinMaxList)
}

inline void MinMaxList::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.minmaxnodes_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MinMaxList::~MinMaxList() {
  // @@protoc_insertion_point(destructor:MinMaxList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MinMaxList::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.minmaxnodes_.~RepeatedPtrField();
}

void MinMaxList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MinMaxList::Clear() {
// @@protoc_insertion_point(message_clear_start:MinMaxList)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.minmaxnodes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MinMaxList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .MinMaxNode minMaxNodes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_minmaxnodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MinMaxList::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MinMaxList)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .MinMaxNode minMaxNodes = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_minmaxnodes_size()); i < n; i++) {
    const auto& repfield = this->_internal_minmaxnodes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MinMaxList)
  return target;
}

::size_t MinMaxList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MinMaxList)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .MinMaxNode minMaxNodes = 1;
  total_size += 1UL * this->_internal_minmaxnodes_size();
  for (const auto& msg : this->_impl_.minmaxnodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MinMaxList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MinMaxList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MinMaxList::GetClassData() const { return &_class_data_; }


void MinMaxList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MinMaxList*>(&to_msg);
  auto& from = static_cast<const MinMaxList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:MinMaxList)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.minmaxnodes_.MergeFrom(from._impl_.minmaxnodes_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MinMaxList::CopyFrom(const MinMaxList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MinMaxList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MinMaxList::IsInitialized() const {
  return true;
}

void MinMaxList::InternalSwap(MinMaxList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.minmaxnodes_.InternalSwap(&other->_impl_.minmaxnodes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MinMaxList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minMaxNode_2eproto_getter, &descriptor_table_minMaxNode_2eproto_once,
      file_level_metadata_minMaxNode_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::MinMaxNode*
Arena::CreateMaybeMessage< ::MinMaxNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MinMaxNode >(arena);
}
template<> PROTOBUF_NOINLINE ::MinMaxList*
Arena::CreateMaybeMessage< ::MinMaxList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MinMaxList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
