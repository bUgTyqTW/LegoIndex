// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: minMaxNode.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_minMaxNode_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_minMaxNode_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4022000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4022000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_minMaxNode_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_minMaxNode_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_minMaxNode_2eproto;
class MinMaxList;
struct MinMaxListDefaultTypeInternal;
extern MinMaxListDefaultTypeInternal _MinMaxList_default_instance_;
class MinMaxNode;
struct MinMaxNodeDefaultTypeInternal;
extern MinMaxNodeDefaultTypeInternal _MinMaxNode_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template <>
::MinMaxList* Arena::CreateMaybeMessage<::MinMaxList>(Arena*);
template <>
::MinMaxNode* Arena::CreateMaybeMessage<::MinMaxNode>(Arena*);
PROTOBUF_NAMESPACE_CLOSE


// ===================================================================


// -------------------------------------------------------------------

class MinMaxNode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MinMaxNode) */ {
 public:
  inline MinMaxNode() : MinMaxNode(nullptr) {}
  ~MinMaxNode() override;
  explicit PROTOBUF_CONSTEXPR MinMaxNode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MinMaxNode(const MinMaxNode& from);
  MinMaxNode(MinMaxNode&& from) noexcept
    : MinMaxNode() {
    *this = ::std::move(from);
  }

  inline MinMaxNode& operator=(const MinMaxNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline MinMaxNode& operator=(MinMaxNode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MinMaxNode& default_instance() {
    return *internal_default_instance();
  }
  static inline const MinMaxNode* internal_default_instance() {
    return reinterpret_cast<const MinMaxNode*>(
               &_MinMaxNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MinMaxNode& a, MinMaxNode& b) {
    a.Swap(&b);
  }
  inline void Swap(MinMaxNode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MinMaxNode* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MinMaxNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MinMaxNode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MinMaxNode& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MinMaxNode& from) {
    MinMaxNode::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MinMaxNode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "MinMaxNode";
  }
  protected:
  explicit MinMaxNode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinFieldNumber = 1,
    kMaxFieldNumber = 2,
    kStartFieldNumber = 3,
    kEndFieldNumber = 4,
  };
  // double min = 1;
  void clear_min() ;
  double min() const;
  void set_min(double value);

  private:
  double _internal_min() const;
  void _internal_set_min(double value);

  public:
  // double max = 2;
  void clear_max() ;
  double max() const;
  void set_max(double value);

  private:
  double _internal_max() const;
  void _internal_set_max(double value);

  public:
  // uint64 start = 3;
  void clear_start() ;
  ::uint64_t start() const;
  void set_start(::uint64_t value);

  private:
  ::uint64_t _internal_start() const;
  void _internal_set_start(::uint64_t value);

  public:
  // uint64 end = 4;
  void clear_end() ;
  ::uint64_t end() const;
  void set_end(::uint64_t value);

  private:
  ::uint64_t _internal_end() const;
  void _internal_set_end(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:MinMaxNode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double min_;
    double max_;
    ::uint64_t start_;
    ::uint64_t end_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_minMaxNode_2eproto;
};// -------------------------------------------------------------------

class MinMaxList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MinMaxList) */ {
 public:
  inline MinMaxList() : MinMaxList(nullptr) {}
  ~MinMaxList() override;
  explicit PROTOBUF_CONSTEXPR MinMaxList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MinMaxList(const MinMaxList& from);
  MinMaxList(MinMaxList&& from) noexcept
    : MinMaxList() {
    *this = ::std::move(from);
  }

  inline MinMaxList& operator=(const MinMaxList& from) {
    CopyFrom(from);
    return *this;
  }
  inline MinMaxList& operator=(MinMaxList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MinMaxList& default_instance() {
    return *internal_default_instance();
  }
  static inline const MinMaxList* internal_default_instance() {
    return reinterpret_cast<const MinMaxList*>(
               &_MinMaxList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MinMaxList& a, MinMaxList& b) {
    a.Swap(&b);
  }
  inline void Swap(MinMaxList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MinMaxList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MinMaxList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MinMaxList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MinMaxList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MinMaxList& from) {
    MinMaxList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MinMaxList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "MinMaxList";
  }
  protected:
  explicit MinMaxList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinMaxNodesFieldNumber = 1,
  };
  // repeated .MinMaxNode minMaxNodes = 1;
  int minmaxnodes_size() const;
  private:
  int _internal_minmaxnodes_size() const;

  public:
  void clear_minmaxnodes() ;
  ::MinMaxNode* mutable_minmaxnodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MinMaxNode >*
      mutable_minmaxnodes();
  private:
  const ::MinMaxNode& _internal_minmaxnodes(int index) const;
  ::MinMaxNode* _internal_add_minmaxnodes();
  public:
  const ::MinMaxNode& minmaxnodes(int index) const;
  ::MinMaxNode* add_minmaxnodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MinMaxNode >&
      minmaxnodes() const;
  // @@protoc_insertion_point(class_scope:MinMaxList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MinMaxNode > minmaxnodes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_minMaxNode_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// MinMaxNode

// double min = 1;
inline void MinMaxNode::clear_min() {
  _impl_.min_ = 0;
}
inline double MinMaxNode::min() const {
  // @@protoc_insertion_point(field_get:MinMaxNode.min)
  return _internal_min();
}
inline void MinMaxNode::set_min(double value) {
  _internal_set_min(value);
  // @@protoc_insertion_point(field_set:MinMaxNode.min)
}
inline double MinMaxNode::_internal_min() const {
  return _impl_.min_;
}
inline void MinMaxNode::_internal_set_min(double value) {
  ;
  _impl_.min_ = value;
}

// double max = 2;
inline void MinMaxNode::clear_max() {
  _impl_.max_ = 0;
}
inline double MinMaxNode::max() const {
  // @@protoc_insertion_point(field_get:MinMaxNode.max)
  return _internal_max();
}
inline void MinMaxNode::set_max(double value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:MinMaxNode.max)
}
inline double MinMaxNode::_internal_max() const {
  return _impl_.max_;
}
inline void MinMaxNode::_internal_set_max(double value) {
  ;
  _impl_.max_ = value;
}

// uint64 start = 3;
inline void MinMaxNode::clear_start() {
  _impl_.start_ = ::uint64_t{0u};
}
inline ::uint64_t MinMaxNode::start() const {
  // @@protoc_insertion_point(field_get:MinMaxNode.start)
  return _internal_start();
}
inline void MinMaxNode::set_start(::uint64_t value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:MinMaxNode.start)
}
inline ::uint64_t MinMaxNode::_internal_start() const {
  return _impl_.start_;
}
inline void MinMaxNode::_internal_set_start(::uint64_t value) {
  ;
  _impl_.start_ = value;
}

// uint64 end = 4;
inline void MinMaxNode::clear_end() {
  _impl_.end_ = ::uint64_t{0u};
}
inline ::uint64_t MinMaxNode::end() const {
  // @@protoc_insertion_point(field_get:MinMaxNode.end)
  return _internal_end();
}
inline void MinMaxNode::set_end(::uint64_t value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:MinMaxNode.end)
}
inline ::uint64_t MinMaxNode::_internal_end() const {
  return _impl_.end_;
}
inline void MinMaxNode::_internal_set_end(::uint64_t value) {
  ;
  _impl_.end_ = value;
}

// -------------------------------------------------------------------

// MinMaxList

// repeated .MinMaxNode minMaxNodes = 1;
inline int MinMaxList::_internal_minmaxnodes_size() const {
  return _impl_.minmaxnodes_.size();
}
inline int MinMaxList::minmaxnodes_size() const {
  return _internal_minmaxnodes_size();
}
inline void MinMaxList::clear_minmaxnodes() {
  _impl_.minmaxnodes_.Clear();
}
inline ::MinMaxNode* MinMaxList::mutable_minmaxnodes(int index) {
  // @@protoc_insertion_point(field_mutable:MinMaxList.minMaxNodes)
  return _impl_.minmaxnodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MinMaxNode >*
MinMaxList::mutable_minmaxnodes() {
  // @@protoc_insertion_point(field_mutable_list:MinMaxList.minMaxNodes)
  return &_impl_.minmaxnodes_;
}
inline const ::MinMaxNode& MinMaxList::_internal_minmaxnodes(int index) const {
  return _impl_.minmaxnodes_.Get(index);
}
inline const ::MinMaxNode& MinMaxList::minmaxnodes(int index) const {
  // @@protoc_insertion_point(field_get:MinMaxList.minMaxNodes)
  return _internal_minmaxnodes(index);
}
inline ::MinMaxNode* MinMaxList::_internal_add_minmaxnodes() {
  return _impl_.minmaxnodes_.Add();
}
inline ::MinMaxNode* MinMaxList::add_minmaxnodes() {
  ::MinMaxNode* _add = _internal_add_minmaxnodes();
  // @@protoc_insertion_point(field_add:MinMaxList.minMaxNodes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MinMaxNode >&
MinMaxList::minmaxnodes() const {
  // @@protoc_insertion_point(field_list:MinMaxList.minMaxNodes)
  return _impl_.minmaxnodes_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_minMaxNode_2eproto_2epb_2eh
