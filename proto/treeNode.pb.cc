// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/treeNode.proto

#include "treeNode.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
PROTOBUF_CONSTEXPR TreeNode::TreeNode(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bloom_filter_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.level_)*/ 0

  , /*decltype(_impl_.childsize_)*/ 0

  , /*decltype(_impl_.minx_)*/ 0

  , /*decltype(_impl_.maxx_)*/ 0

  , /*decltype(_impl_.miny_)*/ 0

  , /*decltype(_impl_.maxy_)*/ 0

  , /*decltype(_impl_.minz_)*/ 0

  , /*decltype(_impl_.maxz_)*/ 0

  , /*decltype(_impl_.start_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.end_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TreeNodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TreeNodeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TreeNodeDefaultTypeInternal() {}
  union {
    TreeNode _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TreeNodeDefaultTypeInternal _TreeNode_default_instance_;
PROTOBUF_CONSTEXPR TreeNodeList::TreeNodeList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.treenodes_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TreeNodeListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TreeNodeListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TreeNodeListDefaultTypeInternal() {}
  union {
    TreeNodeList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TreeNodeListDefaultTypeInternal _TreeNodeList_default_instance_;
static ::_pb::Metadata file_level_metadata_proto_2ftreeNode_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_proto_2ftreeNode_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_proto_2ftreeNode_2eproto = nullptr;
const ::uint32_t TableStruct_proto_2ftreeNode_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::TreeNode, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::TreeNode, _impl_.level_),
    PROTOBUF_FIELD_OFFSET(::TreeNode, _impl_.childsize_),
    PROTOBUF_FIELD_OFFSET(::TreeNode, _impl_.minx_),
    PROTOBUF_FIELD_OFFSET(::TreeNode, _impl_.maxx_),
    PROTOBUF_FIELD_OFFSET(::TreeNode, _impl_.miny_),
    PROTOBUF_FIELD_OFFSET(::TreeNode, _impl_.maxy_),
    PROTOBUF_FIELD_OFFSET(::TreeNode, _impl_.minz_),
    PROTOBUF_FIELD_OFFSET(::TreeNode, _impl_.maxz_),
    PROTOBUF_FIELD_OFFSET(::TreeNode, _impl_.start_),
    PROTOBUF_FIELD_OFFSET(::TreeNode, _impl_.end_),
    PROTOBUF_FIELD_OFFSET(::TreeNode, _impl_.bloom_filter_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::TreeNodeList, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::TreeNodeList, _impl_.treenodes_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::TreeNode)},
        { 19, -1, -1, sizeof(::TreeNodeList)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::_TreeNode_default_instance_._instance,
    &::_TreeNodeList_default_instance_._instance,
};
const char descriptor_table_protodef_proto_2ftreeNode_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\024proto/treeNode.proto\"\262\001\n\010TreeNode\022\r\n\005l"
    "evel\030\001 \001(\005\022\021\n\tchildSize\030\002 \001(\005\022\014\n\004minx\030\003 "
    "\001(\001\022\014\n\004maxx\030\004 \001(\001\022\014\n\004miny\030\005 \001(\001\022\014\n\004maxy\030"
    "\006 \001(\001\022\014\n\004minz\030\007 \001(\001\022\014\n\004maxz\030\010 \001(\001\022\r\n\005sta"
    "rt\030\t \001(\004\022\013\n\003end\030\n \001(\004\022\024\n\014bloom_filter\030\013 "
    "\001(\014\",\n\014TreeNodeList\022\034\n\ttreeNodes\030\001 \003(\0132\t"
    ".TreeNodeb\006proto3"
};
static ::absl::once_flag descriptor_table_proto_2ftreeNode_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_proto_2ftreeNode_2eproto = {
    false,
    false,
    257,
    descriptor_table_protodef_proto_2ftreeNode_2eproto,
    "proto/treeNode.proto",
    &descriptor_table_proto_2ftreeNode_2eproto_once,
    nullptr,
    0,
    2,
    schemas,
    file_default_instances,
    TableStruct_proto_2ftreeNode_2eproto::offsets,
    file_level_metadata_proto_2ftreeNode_2eproto,
    file_level_enum_descriptors_proto_2ftreeNode_2eproto,
    file_level_service_descriptors_proto_2ftreeNode_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_proto_2ftreeNode_2eproto_getter() {
  return &descriptor_table_proto_2ftreeNode_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_proto_2ftreeNode_2eproto(&descriptor_table_proto_2ftreeNode_2eproto);
// ===================================================================

class TreeNode::_Internal {
 public:
};

TreeNode::TreeNode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:TreeNode)
}
TreeNode::TreeNode(const TreeNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TreeNode* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bloom_filter_) {}

    , decltype(_impl_.level_) {}

    , decltype(_impl_.childsize_) {}

    , decltype(_impl_.minx_) {}

    , decltype(_impl_.maxx_) {}

    , decltype(_impl_.miny_) {}

    , decltype(_impl_.maxy_) {}

    , decltype(_impl_.minz_) {}

    , decltype(_impl_.maxz_) {}

    , decltype(_impl_.start_) {}

    , decltype(_impl_.end_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.bloom_filter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.bloom_filter_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bloom_filter().empty()) {
    _this->_impl_.bloom_filter_.Set(from._internal_bloom_filter(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.level_, &from._impl_.level_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.end_) -
    reinterpret_cast<char*>(&_impl_.level_)) + sizeof(_impl_.end_));
  // @@protoc_insertion_point(copy_constructor:TreeNode)
}

inline void TreeNode::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.bloom_filter_) {}

    , decltype(_impl_.level_) { 0 }

    , decltype(_impl_.childsize_) { 0 }

    , decltype(_impl_.minx_) { 0 }

    , decltype(_impl_.maxx_) { 0 }

    , decltype(_impl_.miny_) { 0 }

    , decltype(_impl_.maxy_) { 0 }

    , decltype(_impl_.minz_) { 0 }

    , decltype(_impl_.maxz_) { 0 }

    , decltype(_impl_.start_) { ::uint64_t{0u} }

    , decltype(_impl_.end_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.bloom_filter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.bloom_filter_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TreeNode::~TreeNode() {
  // @@protoc_insertion_point(destructor:TreeNode)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TreeNode::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bloom_filter_.Destroy();
}

void TreeNode::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TreeNode::Clear() {
// @@protoc_insertion_point(message_clear_start:TreeNode)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bloom_filter_.ClearToEmpty();
  ::memset(&_impl_.level_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.end_) -
      reinterpret_cast<char*>(&_impl_.level_)) + sizeof(_impl_.end_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TreeNode::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 childSize = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.childsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // double minx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 25)) {
          _impl_.minx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // double maxx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 33)) {
          _impl_.maxx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // double miny = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 41)) {
          _impl_.miny_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // double maxy = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 49)) {
          _impl_.maxy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // double minz = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 57)) {
          _impl_.minz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // double maxz = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 65)) {
          _impl_.maxz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 start = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _impl_.start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 end = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          _impl_.end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes bloom_filter = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_bloom_filter();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TreeNode::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TreeNode)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 level = 1;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_level(), target);
  }

  // int32 childSize = 2;
  if (this->_internal_childsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_childsize(), target);
  }

  // double minx = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_minx = this->_internal_minx();
  ::uint64_t raw_minx;
  memcpy(&raw_minx, &tmp_minx, sizeof(tmp_minx));
  if (raw_minx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_minx(), target);
  }

  // double maxx = 4;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_maxx = this->_internal_maxx();
  ::uint64_t raw_maxx;
  memcpy(&raw_maxx, &tmp_maxx, sizeof(tmp_maxx));
  if (raw_maxx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        4, this->_internal_maxx(), target);
  }

  // double miny = 5;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_miny = this->_internal_miny();
  ::uint64_t raw_miny;
  memcpy(&raw_miny, &tmp_miny, sizeof(tmp_miny));
  if (raw_miny != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        5, this->_internal_miny(), target);
  }

  // double maxy = 6;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_maxy = this->_internal_maxy();
  ::uint64_t raw_maxy;
  memcpy(&raw_maxy, &tmp_maxy, sizeof(tmp_maxy));
  if (raw_maxy != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        6, this->_internal_maxy(), target);
  }

  // double minz = 7;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_minz = this->_internal_minz();
  ::uint64_t raw_minz;
  memcpy(&raw_minz, &tmp_minz, sizeof(tmp_minz));
  if (raw_minz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        7, this->_internal_minz(), target);
  }

  // double maxz = 8;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_maxz = this->_internal_maxz();
  ::uint64_t raw_maxz;
  memcpy(&raw_maxz, &tmp_maxz, sizeof(tmp_maxz));
  if (raw_maxz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        8, this->_internal_maxz(), target);
  }

  // uint64 start = 9;
  if (this->_internal_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        9, this->_internal_start(), target);
  }

  // uint64 end = 10;
  if (this->_internal_end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        10, this->_internal_end(), target);
  }

  // bytes bloom_filter = 11;
  if (!this->_internal_bloom_filter().empty()) {
    const std::string& _s = this->_internal_bloom_filter();
    target = stream->WriteBytesMaybeAliased(11, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TreeNode)
  return target;
}

::size_t TreeNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TreeNode)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes bloom_filter = 11;
  if (!this->_internal_bloom_filter().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_bloom_filter());
  }

  // int32 level = 1;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_level());
  }

  // int32 childSize = 2;
  if (this->_internal_childsize() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_childsize());
  }

  // double minx = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_minx = this->_internal_minx();
  ::uint64_t raw_minx;
  memcpy(&raw_minx, &tmp_minx, sizeof(tmp_minx));
  if (raw_minx != 0) {
    total_size += 9;
  }

  // double maxx = 4;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_maxx = this->_internal_maxx();
  ::uint64_t raw_maxx;
  memcpy(&raw_maxx, &tmp_maxx, sizeof(tmp_maxx));
  if (raw_maxx != 0) {
    total_size += 9;
  }

  // double miny = 5;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_miny = this->_internal_miny();
  ::uint64_t raw_miny;
  memcpy(&raw_miny, &tmp_miny, sizeof(tmp_miny));
  if (raw_miny != 0) {
    total_size += 9;
  }

  // double maxy = 6;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_maxy = this->_internal_maxy();
  ::uint64_t raw_maxy;
  memcpy(&raw_maxy, &tmp_maxy, sizeof(tmp_maxy));
  if (raw_maxy != 0) {
    total_size += 9;
  }

  // double minz = 7;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_minz = this->_internal_minz();
  ::uint64_t raw_minz;
  memcpy(&raw_minz, &tmp_minz, sizeof(tmp_minz));
  if (raw_minz != 0) {
    total_size += 9;
  }

  // double maxz = 8;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_maxz = this->_internal_maxz();
  ::uint64_t raw_maxz;
  memcpy(&raw_maxz, &tmp_maxz, sizeof(tmp_maxz));
  if (raw_maxz != 0) {
    total_size += 9;
  }

  // uint64 start = 9;
  if (this->_internal_start() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_start());
  }

  // uint64 end = 10;
  if (this->_internal_end() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_end());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TreeNode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TreeNode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TreeNode::GetClassData() const { return &_class_data_; }


void TreeNode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TreeNode*>(&to_msg);
  auto& from = static_cast<const TreeNode&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TreeNode)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bloom_filter().empty()) {
    _this->_internal_set_bloom_filter(from._internal_bloom_filter());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_childsize() != 0) {
    _this->_internal_set_childsize(from._internal_childsize());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_minx = from._internal_minx();
  ::uint64_t raw_minx;
  memcpy(&raw_minx, &tmp_minx, sizeof(tmp_minx));
  if (raw_minx != 0) {
    _this->_internal_set_minx(from._internal_minx());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_maxx = from._internal_maxx();
  ::uint64_t raw_maxx;
  memcpy(&raw_maxx, &tmp_maxx, sizeof(tmp_maxx));
  if (raw_maxx != 0) {
    _this->_internal_set_maxx(from._internal_maxx());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_miny = from._internal_miny();
  ::uint64_t raw_miny;
  memcpy(&raw_miny, &tmp_miny, sizeof(tmp_miny));
  if (raw_miny != 0) {
    _this->_internal_set_miny(from._internal_miny());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_maxy = from._internal_maxy();
  ::uint64_t raw_maxy;
  memcpy(&raw_maxy, &tmp_maxy, sizeof(tmp_maxy));
  if (raw_maxy != 0) {
    _this->_internal_set_maxy(from._internal_maxy());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_minz = from._internal_minz();
  ::uint64_t raw_minz;
  memcpy(&raw_minz, &tmp_minz, sizeof(tmp_minz));
  if (raw_minz != 0) {
    _this->_internal_set_minz(from._internal_minz());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_maxz = from._internal_maxz();
  ::uint64_t raw_maxz;
  memcpy(&raw_maxz, &tmp_maxz, sizeof(tmp_maxz));
  if (raw_maxz != 0) {
    _this->_internal_set_maxz(from._internal_maxz());
  }
  if (from._internal_start() != 0) {
    _this->_internal_set_start(from._internal_start());
  }
  if (from._internal_end() != 0) {
    _this->_internal_set_end(from._internal_end());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TreeNode::CopyFrom(const TreeNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TreeNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreeNode::IsInitialized() const {
  return true;
}

void TreeNode::InternalSwap(TreeNode* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.bloom_filter_, lhs_arena,
                                       &other->_impl_.bloom_filter_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TreeNode, _impl_.end_)
      + sizeof(TreeNode::_impl_.end_)
      - PROTOBUF_FIELD_OFFSET(TreeNode, _impl_.level_)>(
          reinterpret_cast<char*>(&_impl_.level_),
          reinterpret_cast<char*>(&other->_impl_.level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TreeNode::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2ftreeNode_2eproto_getter, &descriptor_table_proto_2ftreeNode_2eproto_once,
      file_level_metadata_proto_2ftreeNode_2eproto[0]);
}
// ===================================================================

class TreeNodeList::_Internal {
 public:
};

TreeNodeList::TreeNodeList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:TreeNodeList)
}
TreeNodeList::TreeNodeList(const TreeNodeList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TreeNodeList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.treenodes_){from._impl_.treenodes_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TreeNodeList)
}

inline void TreeNodeList::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.treenodes_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TreeNodeList::~TreeNodeList() {
  // @@protoc_insertion_point(destructor:TreeNodeList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TreeNodeList::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.treenodes_.~RepeatedPtrField();
}

void TreeNodeList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TreeNodeList::Clear() {
// @@protoc_insertion_point(message_clear_start:TreeNodeList)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.treenodes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TreeNodeList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TreeNode treeNodes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_treenodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TreeNodeList::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TreeNodeList)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TreeNode treeNodes = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_treenodes_size()); i < n; i++) {
    const auto& repfield = this->_internal_treenodes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TreeNodeList)
  return target;
}

::size_t TreeNodeList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TreeNodeList)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TreeNode treeNodes = 1;
  total_size += 1UL * this->_internal_treenodes_size();
  for (const auto& msg : this->_impl_.treenodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TreeNodeList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TreeNodeList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TreeNodeList::GetClassData() const { return &_class_data_; }


void TreeNodeList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TreeNodeList*>(&to_msg);
  auto& from = static_cast<const TreeNodeList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TreeNodeList)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.treenodes_.MergeFrom(from._impl_.treenodes_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TreeNodeList::CopyFrom(const TreeNodeList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TreeNodeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreeNodeList::IsInitialized() const {
  return true;
}

void TreeNodeList::InternalSwap(TreeNodeList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.treenodes_.InternalSwap(&other->_impl_.treenodes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TreeNodeList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2ftreeNode_2eproto_getter, &descriptor_table_proto_2ftreeNode_2eproto_once,
      file_level_metadata_proto_2ftreeNode_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TreeNode*
Arena::CreateMaybeMessage< ::TreeNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TreeNode >(arena);
}
template<> PROTOBUF_NOINLINE ::TreeNodeList*
Arena::CreateMaybeMessage< ::TreeNodeList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TreeNodeList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
